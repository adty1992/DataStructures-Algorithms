题目：
一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。

题解：
设青蛙跳上n级台阶的跳法为f(n).
思路1：
则有：
f(1) = 1; [1]
f(2) = 2; [1+1, 2]
f(3) = 4; [1+1+1, 1+2, 2+1, 3]
f(4) = 8; [1+1+1+1, 1+1+2, 1+2+1, 1+3, 2+1+1, 2+2, 3+1, 4]
可以得出规律如下：
f(n) = f(1) + f(2) + ... + f(n-1) + 1
或
f(n) = 2*f(n-1)

思路2：
因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级
跳1级，剩下n-1级，则剩下跳法是f(n-1)
跳2级，剩下n-2级，则剩下跳法是f(n-2)
所以f(n)=f(n-1)+f(n-2)+...+f(1)
因为f(n-1)=f(n-2)+f(n-3)+...+f(1)
所以f(n)=2*f(n-1)

代码：
class Solution {
public:
    int jumpFloorII(int number) {
        if(number < 0) return 0;
        if(number == 1) return 1;
        
        // 初始化容器
        vector<int> docker;
        docker.push_back(0);
        docker.push_back(1);
        
        // 填装容器
        for(int i = 2; i <= number; i++)
        {
            //int rst = 0;
            //for(int j = 1; j < i; j++)
            //{
            //    rst += docker[j];
            //}
            //rst += 1;
            docker.push_back(2*docker[i-1]);
        }
        
        return docker[number];
    }
};

